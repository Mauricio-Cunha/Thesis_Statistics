install.packages("devtools") # Devtools is a package which allows to do this.
install.packages("devtools")
devtools::install_github("dustinfife/flexplot")
install.packages("lme4")
install.packages("ggplot2")
install.packages("car")
install.packages("nortest")
install.packages("multcomp")
install.packages(hnp)
install.packages("lmerTest")
library(lme4)
library(flexplot)
library(ggplot)
library(car)
library(nortest)
library(multcomp)
library(hnp)
library(lmerTest)
library(readr)
P_dados <- read_csv("P_Labil.txt")
View(P_dados)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
View(P_dados)
library(readr)
P_dados <- read_csv("P_Labil.txt")
View(P_dados)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
install.packages("hnp")
library(hnp)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
install.packages("devtools") # Devtools is a package which allows to do this.
devtools::install_github("dustinfife/flexplot")
install.packages("devtools")
install.packages("devtools")
install.packages("lme4")
install.packages("lme4")
install.packages("ggplot2")
install.packages("car")
install.packages("nortest")
install.packages("multcomp")
install.packages("multcomp")
install.packages("lmerTest")
library(lme4)
library(flexplot)
library(ggplot)
library(ggplot2)
library(car)
library(nortest)
library(multcomp)
library(hnp)
library(lmerTest)
library(readr)
P_dados <- read_csv("P_Labil.txt")
View(P_dados)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
P_Labil <- read.delim("G:/Meu Drive/GIT/Thesis_Statistics/Linear_Models/P_Labil.txt")
View(P_Labil)
P_dados<- P_Labil
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
# Inserindo o lambda de Box-Cox na base de dados para a estimar um novo modelo
P_dados$BC_P_Lab_Per <- (((P_dados$P_Lab_Per ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
View(P_dados)
# Preciso transformar Character para factor
P_dados$Agregado <- as.factor(P_dados$Agregado)
P_dados$Sistema <- as.factor(P_dados$Sistema)
P_dados$Profundidade <- as.factor(P_dados$Profundidade)
P_dados$Textura <- as.factor(P_dados$Textura)
attach(P_dados)
# Esse graficos sao legais.
flexplot(P_Lab_Per ~ Agregado | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Agregado + Sistema | Textura + Profundidade, data = P_dados)
# Esse graficos sao legais.
flexplot(P_Lab_Per ~ Agregado | Textura + Profundidade, data = P_dados)
# Esse graficos sao legais.
flexplot(P_Lab_Per ~ Agregado | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Agregado + Sistema | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Sistema | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Sistema | Textura + Profundidade + Agregado, data = P_dados)
# modelo nulo
modelo_nulo <- lm(formula = BC_P_Lab_Per ~ 1, data = P_dados)
# modelo linear - P labil em funcao do Agregado
modelo_linear <- lm(formula = BC_P_Lab_Per ~ Agregado, data = P_dados)
modelo_linear_1 <- lm(formula = BC_P_Lab_Per ~ Profundidade, data = P_dados)
modelo_linear_2 <- lm(formula = BC_P_Lab_Per ~ Sistema, data = P_dados)
modelo_linear_3 <- lm(formula = BC_P_Lab_Per ~ Textura, data = P_dados)
modelo_multiplo <- lm(formula = BC_P_Lab_Per ~ Agregado + Profundidade + Sistema + Textura)
# Visualizar modelo
visualize(modelo_nulo)
visualize(modelo_linear)
visualize(modelo_linear_1)
visualize(modelo_linear_2)
visualize(modelo_linear_3)
visualize(modelo_multiplo)
anova(modelo_linear, modelo_nulo) # valor de p < 0.05 indica diferen?a entre os modelos.
anova(modelo_linear, modelo_multiplo)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix")
install.packages("lme4")
install.packages("Matrix")
options(oo)
# modelo nulo
modelo_nulo <- lm(formula = BC_P_Lab_Per ~ 1, data = P_dados)
# modelo linear - P labil em funcao do Agregado
modelo_linear <- lm(formula = BC_P_Lab_Per ~ Agregado, data = P_dados)
modelo_linear_1 <- lm(formula = BC_P_Lab_Per ~ Profundidade, data = P_dados)
modelo_linear_2 <- lm(formula = BC_P_Lab_Per ~ Sistema, data = P_dados)
modelo_linear_3 <- lm(formula = BC_P_Lab_Per ~ Textura, data = P_dados)
modelo_multiplo <- lm(formula = BC_P_Lab_Per ~ Agregado + Profundidade + Sistema + Textura)
# Visualizar modelo
visualize(modelo_nulo)
visualize(modelo_linear)
library(lme4)
# Visualizar modelo
visualize(modelo_nulo)
install.packages("devtools") # Devtools is a package which allows to do this.
install.packages("devtools")
# Visualizar modelo
visualize(modelo_nulo)
P_dados <- read_csv("P_Labil.txt")
library(readr)
P_dados <- read_csv("P_Labil.txt")
P_dados<- P_Labil
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
library(lme4)
library(flexplot)
library(ggplot2)
library(car)
library(nortest)
library(multcomp)
library(hnp)
library(lmerTest)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
P_Labil <- read.delim("G:/Meu Drive/GIT/Thesis_Statistics/Linear_Models/P_Labil.txt")
View(P_Labil)
P_dados<-P_Labil
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
# Inserindo o lambda de Box-Cox na base de dados para a estimar um novo modelo
P_dados$BC_P_Lab_Per <- (((P_dados$P_Lab_Per ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
View(P_dados)
# Preciso transformar Character para factor
P_dados$Agregado <- as.factor(P_dados$Agregado)
P_dados$Sistema <- as.factor(P_dados$Sistema)
P_dados$Profundidade <- as.factor(P_dados$Profundidade)
P_dados$Textura <- as.factor(P_dados$Textura)
attach(P_dados)
# Esse graficos sao legais.
flexplot(P_Lab_Per ~ Agregado | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Agregado + Sistema | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Sistema | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Sistema | Textura + Profundidade + Agregado, data = P_dados)
# modelo nulo
modelo_nulo <- lm(formula = BC_P_Lab_Per ~ 1, data = P_dados)
# modelo linear - P labil em funcao do Agregado
modelo_linear <- lm(formula = BC_P_Lab_Per ~ Agregado, data = P_dados)
modelo_linear_1 <- lm(formula = BC_P_Lab_Per ~ Profundidade, data = P_dados)
modelo_linear_2 <- lm(formula = BC_P_Lab_Per ~ Sistema, data = P_dados)
modelo_linear_3 <- lm(formula = BC_P_Lab_Per ~ Textura, data = P_dados)
modelo_multiplo <- lm(formula = BC_P_Lab_Per ~ Agregado + Profundidade + Sistema + Textura)
# Visualizar modelo
visualize(modelo_nulo)
visualize(modelo_linear)
visualize(modelo_linear_1)
visualize(modelo_linear_2)
visualize(modelo_linear_3)
visualize(modelo_multiplo)
anova(modelo_linear, modelo_nulo) # valor de p < 0.05 indica diferen?a entre os modelos.
anova(modelo_linear, modelo_multiplo)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
modelo_baseline_Textura <- lmer(BC_P_Lab_Per ~ 1 + (1|Textura), data = P_dados)
modelo_baseline_Profundidade <- lmer(BC_P_Lab_Per ~ 1 + (1|Profundidade), data = P_dados)
modelo_baseline_Sistema <- lmer(BC_P_Lab_Per ~ 1 + (1|Sistema), data = P_dados)
icc(modelo_baseline_Profundidade)
# Intra Class/Cluster Coprrelation (ICC)
# Indica o quanto da variancia se deve ao agrupamento/efeito aleatorio da variavel
# O desing effect indica o qaunto nosso tamanho amostra seria inflado se nao usarmos a variavel/cluster no modelo.
icc(modelo_baseline_Textura)
icc(modelo_baseline_Profundidade)
icc(modelo_baseline_Sistema)
icc(modelo_baseline_Agregado)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
modelo_baseline_Textura <- lmer(BC_P_Lab_Per ~ 1 + (1|Textura), data = P_dados)
modelo_baseline_Profundidade <- lmer(BC_P_Lab_Per ~ 1 + (1|Profundidade), data = P_dados)
modelo_baseline_Sistema <- lmer(BC_P_Lab_Per ~ 1 + (1|Sistema), data = P_dados)
# Intra Class/Cluster Coprrelation (ICC)
# Indica o quanto da variancia se deve ao agrupamento/efeito aleatorio da variavel
# O desing effect indica o quanto nosso tamanho amostra seria inflado se nao usarmos a variavel/cluster no modelo.
icc(modelo_baseline_Textura)
icc(modelo_baseline_Profundidade)
icc(modelo_baseline_Sistema)
icc(modelo_baseline_Agregado)
# Intra Class/Cluster Coprrelation (ICC)
# Indica o quanto da variancia se deve ao agrupamento/efeito aleatorio da variavel
# O desing effect indica o quanto nosso tamanho amostra seria inflado se nao usarmos a variavel/cluster no modelo.
icc(modelo_baseline_Textura)
icc(modelo_baseline_Profundidade)
icc(modelo_baseline_Sistema)
icc(modelo_baseline_Agregado)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
modelo_baseline_Textura <- lmer(BC_P_Lab_Per ~ 1 + (1|Textura), data = P_dados)
modelo_baseline_Profundidade <- lmer(BC_P_Lab_Per ~ 1 + (1|Profundidade), data = P_dados)
modelo_baseline_Sistema <- lmer(BC_P_Lab_Per ~ 1 + (1|Sistema), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 1 efeito aleatorio
fit_1 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade), data = P_dados)
fit_2 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema), data = P_dados)
fit_3 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Textura), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 2 efeitos aleatorio
fit_4 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade) + (1|Sistema), data = P_dados)
fit_5 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade) +(1|Textura), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 3 efeitos aleatorio
fit_6 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade) + (1|Sistema) + (1|Textura), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 2 efeitos aleatorio Aninhados
fit_7 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema/Profundidade), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 3 efeitos aleatorio - 2 Aninhados
fit_8 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema/Profundidade) + (1|Textura), data = P_dados)
# Modelo com slope fixo - 2 efeitos fixos
fit_9 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura/Profundidade), data = P_dados)
fit_10 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura) + (1|Profundidade), data = P_dados)
fit_11 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura/Sistema) + (1|Profundidade/Agregado), data = P_dados)
# Modelo com slope fixo - 3 efeitos fixos
fit_12 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Profundidade + (1|Textura), data = P_dados)
fit_13 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Profundidade + (1|Textura/Sistema), data = P_dados)
fit_14 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade), data = P_dados)
fit_15 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade/Agregado), data = P_dados)
fit_16 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Textura/Sistema) + (1|Profundidade/Agregado), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 2 efeitos aleatorio Aninhados
fit_7 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema/Profundidade), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 3 efeitos aleatorio - 2 Aninhados
fit_8 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema/Profundidade) + (1|Textura), data = P_dados)
# Modelo com slope fixo - 2 efeitos fixos
fit_9 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura/Profundidade), data = P_dados)
fit_10 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura) + (1|Profundidade), data = P_dados)
fit_11 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura/Sistema) + (1|Profundidade/Agregado), data = P_dados)
# Modelo com slope fixo - 3 efeitos fixos
fit_12 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Profundidade + (1|Textura), data = P_dados)
fit_13 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Profundidade + (1|Textura/Sistema), data = P_dados)
fit_14 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade), data = P_dados)
fit_15 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade/Agregado), data = P_dados)
fit_16 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Textura/Sistema) + (1|Profundidade/Agregado), data = P_dados)
# Modelo com slope fixo - 4 efeitos fixos
fit_17 <- lmer(BC_P_Lab_Per ~ Agregado + Profundidade + Sistema + Textura + (1|Profundidade) + (1|Sistema) + (1|Textura), data = P_dados)
modelo_slope_aleatorio <- lmer(BC_P_Lab_Per ~ Agregado + (Agregado|Profundidade), data = P_dados)
model.comparison(modelo_baseline_Agregado, fit_1)
model.comparison(fit_1, fit_2)
model.comparison(fit_2, fit_3)
model.comparison(fit_3, fit_4)
model.comparison(fit_3, fit_5)
model.comparison(fit_5, fit_6)
model.comparison(fit_5, fit_7)
model.comparison(fit_10, fit_7)
model.comparison(fit_10, fit_11)
model.comparison(fit_11, fit_12)
model.comparison(fit_11, fit_14)
model.comparison(fit_11, fit_15) # o 15 ficou parecido
model.comparison(fit_11, fit_16) # o 16 diferiu
model.comparison(fit_11, fit_17)
model.comparison(fit_16, fit_7)
model.comparison(fit_11, modelo_multiplo)
model.comparison(fit_16, modelo_multiplo)
# Anova para comparar modleos
anova(fit_11, fit_15)
anova(fit_11, fit_16)
anova(fit_11, fit_17)
anova(fit_16, fit_17)
ranova(fit_16) # anova para os parametros
ranova (fit_11)
# Compara os modelos similares graficamente - mAS NAO FUNCIONOU
compare.fits(P_Lab_Per ~ Agregado|Textura + Profundidade, data = P_dados, fit_16)
# Visualizar o modelo graficamente, mas nao funcionou para esses modleos.
visualize(fit_16)
visualize(fit_11)
# Informacao do modelo
summary(fit_16)
summary(fit_11)
# Extrair parametros estimados do modelo
estimates(fit_16)
estimates(fit_11)
# ----- Normalidade dos residuos --------- #
# Residuos
res=residuals(fit_16)
# PLotar residuos do modelo
plot(fit_16)
# An?lise gr?fica dos res?duos - Gr?fico quantil-quantil
qqnorm(res,col="blue",cex=0.7,xlab="Quantis da distribui??o normal",ylab="Res?duos")
qqline(res,col="red")
# se p >0.05 n?o rejeitamos a hipotese nula, residuos com distribuicao normal.
# Teste de normalidade de Shapiro-Wilk: n <= 30
shapiro.test(res)
# Shapiro-Francia: n > 30
sf.test(res)
# Type I ANOVA - nao tem valor de p, apenas F
anova(fit_16)
# Type II ANOVA - Aqui apenas medias de agregados Agregado tem diferen?as
Anova(fit_16, test.statistic =  "Chisq", type = 2) # Type II Wald chisquare tests
Anova(fit_16, test.statistic =  "F", type = 2) # Type II Wald F tests with Kenward-Roger df
# Type III ANOVA
Anova(fit_16, test.statistic =  "Chisq", type = 3)
Anova(fit_16, test.statistic =  "F", type = 3)
# Comparar os Agregados, verificar qual teste na anova usar.
summary(glht(fit_16,linfct=mcp(Agregado="Tukey")))
Tukey_Agregado=(glht(fit_16,linfct=mcp(Agregado="Tukey")))
cld(Tukey_Agregado,level=0.95)
# Comparar a Textura
summary(glht(fit_16,linfct=mcp(Textura="Tukey")))
Tukey_Textura=(glht(fit_16,linfct=mcp(Textura="Tukey")))
cld(Tukey_Textura,level=0.95)
# Comparar os Sistemas
summary(glht(fit_9,linfct=mcp(Sistema="Tukey")))
Tukey_Sistema=(glht(fit_9,linfct=mcp(Sistema="Tukey")))
cld(Tukey_Sistema,level=0.95)
# Comparar os Agregados
library(emmeans)
Agregado_emmeans <- emmeans(fit_16, list(pairwise ~ Agregado), adjust = "tukey")
Agregado_emmeans <- emmeans(fit_16, list(pairwise ~ Agregado), adjust = "tukey")
detach(P_dados)
detach(P_dados)
modelo_slope_aleatorio <- lmer(BC_P_Lab_Per ~ Agregado + (Agregado|Profundidade), data = P_dados)
model.comparison(modelo_baseline_Agregado, fit_1)
install.packages("sjPlot")
install.packages("sjPlot")
library(sjPlot)
# Plotagem dos efeitos fixos usando sjPlot
plot_model(fit_16, type = "eff", terms = c("sistema", "aggregado"))
# Plotagem dos efeitos fixos usando sjPlot
plot_model(fit_16, type = "eff", terms = c("sistema", "aggregado"))
y
model.comparison(fit_11, fit_16) # o 16 diferiu
P_dados <- read.delim("G:/Meu Drive/GIT/Thesis_Statistics/Linear_Models/P_Labil.txt")
View(P_dados)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
library(lme4)
library(flexplot)
library(ggplot2)
library(car)
library(nortest)
library(multcomp)
library(hnp)
library(lmerTest)
library(sjPlot)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
# Inserindo o lambda de Box-Cox na base de dados para a estimar um novo modelo
P_dados$BC_P_Lab_Per <- (((P_dados$P_Lab_Per ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
View(P_dados)
# Preciso transformar Character para factor
P_dados$Agregado <- as.factor(P_dados$Agregado)
P_dados$Sistema <- as.factor(P_dados$Sistema)
P_dados$Profundidade <- as.factor(P_dados$Profundidade)
P_dados$Textura <- as.factor(P_dados$Textura)
attach(P_dados)
# Esse graficos sao legais.
flexplot(P_Lab_Per ~ Agregado | Textura + Profundidade, data = P_dados)
# Informacao do modelo
summary(fit_16)
# Trasform. de BOX-COX  da variavel resposta P Labil
# Para normalizar os res?duos do modelo, isso ajudou muito a ter normalidade nos residuos.
lambda_BC <- powerTransform(P_dados$P_Lab_Per)
lambda_BC
# Inserindo o lambda de Box-Cox na base de dados para a estimar um novo modelo
P_dados$BC_P_Lab_Per <- (((P_dados$P_Lab_Per ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
View(P_dados)
# Preciso transformar Character para factor
P_dados$Agregado <- as.factor(P_dados$Agregado)
P_dados$Sistema <- as.factor(P_dados$Sistema)
P_dados$Profundidade <- as.factor(P_dados$Profundidade)
P_dados$Textura <- as.factor(P_dados$Textura)
attach(P_dados)
# Esse graficos sao legais.
flexplot(P_Lab_Per ~ Agregado | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Agregado + Sistema | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Sistema | Textura + Profundidade, data = P_dados)
flexplot(P_Lab_Per ~ Sistema | Textura + Profundidade + Agregado, data = P_dados)
# modelo nulo
modelo_nulo <- lm(formula = BC_P_Lab_Per ~ 1, data = P_dados)
# modelo linear - P labil em funcao do Agregado
modelo_linear <- lm(formula = BC_P_Lab_Per ~ Agregado, data = P_dados)
modelo_linear_1 <- lm(formula = BC_P_Lab_Per ~ Profundidade, data = P_dados)
modelo_linear_2 <- lm(formula = BC_P_Lab_Per ~ Sistema, data = P_dados)
modelo_linear_3 <- lm(formula = BC_P_Lab_Per ~ Textura, data = P_dados)
modelo_multiplo <- lm(formula = BC_P_Lab_Per ~ Agregado + Profundidade + Sistema + Textura)
# Visualizar modelo
visualize(modelo_nulo)
visualize(modelo_linear)
visualize(modelo_linear_1)
visualize(modelo_linear_2)
visualize(modelo_linear_3)
visualize(modelo_multiplo)
anova(modelo_linear, modelo_nulo) # valor de p < 0.05 indica diferen?a entre os modelos.
anova(modelo_linear, modelo_multiplo)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
modelo_baseline_Textura <- lmer(BC_P_Lab_Per ~ 1 + (1|Textura), data = P_dados)
modelo_baseline_Profundidade <- lmer(BC_P_Lab_Per ~ 1 + (1|Profundidade), data = P_dados)
modelo_baseline_Sistema <- lmer(BC_P_Lab_Per ~ 1 + (1|Sistema), data = P_dados)
# Intra Class/Cluster Coprrelation (ICC)
# Indica o quanto da variancia se deve ao agrupamento/efeito aleatorio da variavel
# O desing effect indica o quanto nosso tamanho amostra seria inflado se nao usarmos a variavel/cluster no modelo.
icc(modelo_baseline_Textura)
icc(modelo_baseline_Profundidade)
icc(modelo_baseline_Agregado)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
modelo_baseline_Textura <- lmer(BC_P_Lab_Per ~ 1 + (1|Textura), data = P_dados)
modelo_baseline_Profundidade <- lmer(BC_P_Lab_Per ~ 1 + (1|Profundidade), data = P_dados)
modelo_baseline_Sistema <- lmer(BC_P_Lab_Per ~ 1 + (1|Sistema), data = P_dados)
anova(modelo_linear, modelo_nulo) # valor de p < 0.05 indica diferen?a entre os modelos.
anova(modelo_linear, modelo_multiplo)
modelo_baseline_Agregado <- lmer(BC_P_Lab_Per ~ 1 + (1|Agregado), data = P_dados)
modelo_baseline_Textura <- lmer(BC_P_Lab_Per ~ 1 + (1|Textura), data = P_dados)
modelo_baseline_Profundidade <- lmer(BC_P_Lab_Per ~ 1 + (1|Profundidade), data = P_dados)
modelo_baseline_Sistema <- lmer(BC_P_Lab_Per ~ 1 + (1|Sistema), data = P_dados)
# Intra Class/Cluster Coprrelation (ICC)
# Indica o quanto da variancia se deve ao agrupamento/efeito aleatorio da variavel
# O desing effect indica o quanto nosso tamanho amostra seria inflado se nao usarmos a variavel/cluster no modelo.
icc(modelo_baseline_Textura)
icc(modelo_baseline_Profundidade)
icc(modelo_baseline_Sistema)
icc(modelo_baseline_Agregado)
# Modelo com slope fixo - 1 efeito fixo e 1 efeito aleatorio
fit_1 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade), data = P_dados)
fit_2 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema), data = P_dados)
fit_3 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Textura), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 2 efeitos aleatorio
fit_4 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade) + (1|Sistema), data = P_dados)
fit_5 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade) +(1|Textura), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 3 efeitos aleatorio
fit_6 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Profundidade) + (1|Sistema) + (1|Textura), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 2 efeitos aleatorio Aninhados
fit_7 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema/Profundidade), data = P_dados)
# Modelo com slope fixo - 1 efeito fixo e 3 efeitos aleatorio - 2 Aninhados
fit_8 <- lmer(BC_P_Lab_Per ~ Agregado + (1|Sistema/Profundidade) + (1|Textura), data = P_dados)
# Modelo com slope fixo - 2 efeitos fixos
fit_9 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura/Profundidade), data = P_dados)
fit_10 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura) + (1|Profundidade), data = P_dados)
fit_11 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + (1|Textura/Sistema) + (1|Profundidade/Agregado), data = P_dados)
# Modelo com slope fixo - 3 efeitos fixos
fit_12 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Profundidade + (1|Textura), data = P_dados)
fit_13 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Profundidade + (1|Textura/Sistema), data = P_dados)
fit_14 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade), data = P_dados)
fit_15 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade/Agregado), data = P_dados)
fit_16 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Textura/Sistema) + (1|Profundidade/Agregado), data = P_dados)
# Modelo com slope fixo - 4 efeitos fixos
fit_17 <- lmer(BC_P_Lab_Per ~ Agregado + Profundidade + Sistema + Textura + (1|Profundidade) + (1|Sistema) + (1|Textura), data = P_dados)
modelo_slope_aleatorio <- lmer(BC_P_Lab_Per ~ Agregado + (Agregado|Profundidade), data = P_dados)
model.comparison(modelo_baseline_Agregado, fit_1)
model.comparison(fit_1, fit_2)
model.comparison(fit_2, fit_3)
model.comparison(fit_3, fit_4)
model.comparison(fit_3, fit_5)
model.comparison(fit_5, fit_6)
model.comparison(fit_5, fit_7)
model.comparison(fit_10, fit_7)
model.comparison(fit_10, fit_11)
model.comparison(fit_11, fit_12)
model.comparison(fit_11, fit_14)
model.comparison(fit_11, fit_15) # o 15 ficou parecido
model.comparison(fit_11, fit_16) # o 16 diferiu
model.comparison(fit_11, fit_17)
model.comparison(fit_11, fit_16) # o 16 diferiu
model.comparison(fit_11, fit_15) # o 15 ficou parecido
fit_15 <- lmer(BC_P_Lab_Per ~ Agregado + Sistema + Textura + (1|Profundidade/Agregado), data = P_dados)
model.comparison(fit_1, fit_2)
# Anova para comparar modleos
anova(fit_11, fit_15)
anova(fit_11, fit_16)
anova(fit_11, fit_17)
anova(fit_16, fit_17)
model.comparison(fit_10, fit_11)
estimate(fit_16)
visualize(model, plot="fit_16")
# install the stable version
devtools::install_github("dustinfife/flexplot")
TRUE
# install the development version
devtools::install_github("dustinfife/flexplot", ref="development")
